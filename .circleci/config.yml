version: 2.1


Your CircleCI configuration is already designed to start the server first and then run the tests. However, starting the server and running the tests are two separate steps and CircleCI runs them concurrently, which might cause the tests to run before the server has fully started.

You can fix this issue by modifying the configuration to add a delay before the tests are run, ensuring that the server has enough time to start. Here's how you can modify your configuration:

yaml
Copy code
version: 2.1

jobs:
  build:
    docker:
      - image: python:3.10-slim
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-venv-{{ checksum "Pipfile.lock" }}
            - v1-venv-
      - run:
          name: install dependencies
          command: |
            pip install --upgrade pipenv
            pipenv sync --dev
            pipenv run pip install bandit
      - save_cache:
          paths:
            - /root/.cache/pip
            - ./.venv
          key: v1-venv-{{ checksum "Pipfile.lock" }}
      - run:
          name: start server
          command: |
            pipenv run python server_code.py &
            sleep 10  # delay to allow server to start
      - run:
          name: run tests
          command: |
            pipenv run pytest test_endpoints.py
      - run:
          name: run bandit
          command: |
            pipenv run bandit -r /root/plex-stuff/server_code.py

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:XyQ+4w8reTjwDTLRpVLnf+RGOO/EwVZjq+OTastskKU"
      - run:
          name: Deploy to DigitalOcean
          command: |
            ssh -o StrictHostKeyChecking=no root@206.81.16.199 \<<- 'ENDSSH'
              set -e
              echo "Cloning latest code from repository..."
              mkdir -p ~/plex-stuff-new
              cd ~/plex-stuff-new
              git clone https://github.com/unicorns18/plex-stuff .
              if [ $? -ne 0 ]; then
                echo "Error cloning latest code."
                exit 1
              fi
              # Do any necessary build steps here...
              echo "Switching to new code..."
              rm -rf ~/plex-stuff-old
              mv ~/plex-stuff ~/plex-stuff-old
              mv ~/plex-stuff-new ~/plex-stuff
              echo "Reloading systemd daemon to update service definitions..."
              sudo systemctl daemon-reload
              if [ $? -ne 0 ]; then
                echo "Error reloading systemd daemon."
                exit 1
              fi
              echo "Restarting pybackend service..."
              sudo systemctl restart pybackend.service
              if [ $? -ne 0 ]; then
                echo "Error restarting pybackend service."
                exit 1
              fi
              echo "Deployment successful and application restarted!"
            ENDSSH

workflows:
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: main